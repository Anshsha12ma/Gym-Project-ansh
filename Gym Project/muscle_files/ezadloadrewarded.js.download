try { __ez.fads.adLoadRewarded=(__ez.fads.adLoadRewarded&&__ez.fads.adLoadRewarded.loaded===true)?__ez.fads.adLoadRewarded:Object.assign(__ez.fads.adLoadRewarded,{loaded:true,log:__ez.fads.log,initAttempts:0,maxInitAttempts:100,gamListenersSet:false,initDone:false,floorDropCoeff:1,maxAdLoadRetries:1,minStartingFloor:0.0,minFloor:0.0,preloadInitial:false,preloadRefresh:false,contentBlocker:false,contentBlockerMinPageviews:3,contentBlockerCooldown:1.0,contentBlockerHeader:"",contentBlockerBody:[""],contentBlockerCooldownMessage:"",contentBlockerAcceptText:"",configMap:{floor_drop_coeff:'floorDropCoeff',max_ad_load_retries:'maxAdLoadRetries',min_initial_floor:'minStartingFloor',min_fill_floor:'minFloor',preload_initial:'preloadInitial',preload_refresh:'preloadRefresh',content_blocker:'contentBlocker',content_blocker_min_pageviews:'contentBlockerMinPageviews',content_blocker_cooldown:'contentBlockerCooldown',content_blocker_header:'contentBlockerHeader',content_blocker_body:'contentBlockerBody',content_blocker_cooldown_message:'contentBlockerCooldownMessage',content_blocker_accept_text:'contentBlockerAcceptText',},readyCallback:null,rewardCallback:null,slot:null,storedEvt:null,adLoading:false,adShowing:false,overlayShowing:false,scrollLocked:false,rewardGranted:false,currentAdLoadRetries:0,impressionCount:1,initialFloor:null,blockerShownStorageKey:'ezorwadbl',blockerViewedURLsStorageKey:'ezorwadblvurl',blockerPageviewCountStorageKey:'ezorwadblpvcount',init:function(){if(this.initDone){return;}
if(typeof googletag==="undefined"||typeof googletag.pubads!=="function"||typeof googletag.pubads().addEventListener!=="function"){if(this.initAttempts<this.maxInitAttempts){this.initAttempts++;setTimeout(()=>{this.init();},500);}else{this.log("[rewarded ad] init(): googletag not ready after max retries");}
return;}
this.setConfig();this.initGamListeners();window.ezRewardedAds=window.ezRewardedAds||{};window.ezRewardedAds.cmd=window.ezRewardedAds.cmd||[];window.ezRewardedAds.request=(callback)=>{this.requestRewardedAd(callback);};window.ezRewardedAds.show=(callback)=>{this.showRewardedAd(callback);};window.ezRewardedAds.requestWithOverlay=(callback,text={},config={})=>{if(typeof callback!=="function"){console.warn("[rewarded ad] requestWithOverlay() called with invalid callback argument (not a function).");return;}
if(Object.keys(config).length===0){config={alwaysCallback:false,lockScroll:false,rewardOnNoFill:false,};}
this.requestAndShowOverlay(callback,text,config);};for(let f of window.ezRewardedAds.cmd){if(typeof f==="function"){f();}}
window.ezRewardedAds.cmd={push:function(f){if(typeof f==="function"){f();}}};window.ezRewardedAds.ready=true;this.log("[rewarded ad] initialized");this.initDone=true;if(this.contentBlocker){this.log("[rewarded ad] contentBlocker is enabled");if(this.contentBlockerCheckAndSet()){this.log("[rewarded ad] unique page view count is greater than minimum, showing content blocker");this.blockUntilAdWatched();}}},setConfig:function(){let serverConfig={}
if(typeof this.config==='object'){serverConfig=this.config;}else{this.log("[rewarded ad] setConfig: this.config is not an object, not setting config");return;}
for(let key in this.configMap){if(serverConfig.hasOwnProperty(key)){this[this.configMap[key]]=serverConfig[key];}}
this.log("[rewarded ad] config mapped to class variables");this.log("[rewarded ad] config:",this);},initGamListeners:function(){if(this.gamListenersSet){return;}
this.log("[rewarded ad] setting gam rewarded ad listeners");googletag.pubads().addEventListener('rewardedSlotReady',(evt)=>{this.log('[rewarded ad] rewardedSlotReady');this.adLoading=false;this.storedEvt=evt;this.impressionCount++;if(typeof this.readyCallback==='function'){this.readyCallback({status:true,msg:'ad ready'});this.readyCallback=null;}});googletag.pubads().addEventListener('rewardedSlotGranted',(evt)=>{this.log('[rewarded ad] rewardedSlotGranted '+JSON.stringify(evt.payload));this.rewardGranted=true;});googletag.pubads().addEventListener('rewardedSlotClosed',(evt)=>{this.log('[rewarded ad] rewardedSlotClosed');this.storedEvt=null;this.adShowing=false;if(typeof this.rewardCallback==='function'){this.log("[rewarded ad] calling rewardCallback, rewardGranted:",this.rewardGranted);this.rewardCallback({status:true,reward:this.rewardGranted,msg:'ad closed'});this.rewardCallback=null;this.rewardGranted=false;}else{this.log("[rewarded ad] rewarded ad closed but rewardCallback not set");}});this.gamListenersSet=true;},requestAd:function(){this.log("[rewarded ad] requestAd()");let slot=this.initializeSlot();if(!slot){this.log("[rewarded ad] requestAd(): failed to initialize slot");return false;}
if(this.initialFloor===null){this.initialFloor=__ez.fads.adLoadGAM.getFloor(slot);this.initialFloor=this.initialFloor<this.minStartingFloor?this.minStartingFloor:this.initialFloor;this.log("[rewarded ad] initial floor stored:",this.initialFloor);}
let floor=this.calcFloorExp();__ez.fads.adLoadGAM.setFloor(slot,floor);this.log("[rewarded ad] set floor:",floor);slot.setTargeting('ic',this.currentAdLoadRetries+1);this.log("[rewarded ad] set ic (ad load retry count):",this.currentAdLoadRetries+1);this.log("[rewarded ad] loading rewarded ad");this.adLoading=true;__ez.fads.LoadAd(slot.getSlotElementId(),true,false);return true;},initializeSlot:function(){let slot=null;if(__ez.fads&&__ez.fads.initslots&&typeof __ez.fads.isRewardedAd==='function'){for(let id in __ez.fads.initslots){if(__ez.fads.isRewardedAd(id)){let initslotFunction=__ez.fads.initslots[id];if(typeof initslotFunction==='function'){let ezSlotId=initslotFunction();slot=window[ezSlotId];this.log("[rewarded ad] init slot",id,ezSlotId,slot);}
break;}}}
slot.setTargeting('reft','n');this.slot=slot;return slot;},loadFailed:function(){this.log("[rewarded ad] failed to fill ad");this.adLoading=false;this.currentAdLoadRetries++;if(this.currentAdLoadRetries<=this.maxAdLoadRetries){this.log("[rewarded ad] retrying ad load, currentAdLoadRetries",this.currentAdLoadRetries);this.requestAd();return;}
__ez.pel.Add(this.slot,[new __ezDotData("placeholder_refreshes",this.currentAdLoadRetries+1)]);if(typeof this.readyCallback==='function'){this.log("[rewarded ad] ad failed to load, calling readyCallback");this.readyCallback({status:false,msg:'request successful but rewarded ad went unfilled'});this.readyCallback=null;}else{this.log("[rewarded ad] ad failed to load but readyCallback not set, can't notify pub");}},calcFloorExp:function(){if(this.currentAdLoadRetries>=this.maxAdLoadRetries){return this.minFloor;}
if(this.currentAdLoadRetries===0){return this.initialFloor;}
return this.initialFloor/Math.pow(2*this.floorDropCoeff,this.currentAdLoadRetries);},requestRewardedAd:function(readyCallback){this.log("[rewarded ad] rewarded ad requested");if(typeof readyCallback!=='function'){console.warn("[rewarded ad] request() called with invalid readyCallback (not a function)");return;}
if(this.storedEvt!==null){this.log("[rewarded ad] rewarded ad requested and already ready, calling back immediately");readyCallback({status:true,msg:'ad ready'});return;}
if(this.adLoading){this.log("[rewarded ad] requestRewardedAd ad is already loading.");readyCallback({status:false,msg:'ad already requested. first ad must finish loading before another can be requested'});return;}
this.currentAdLoadRetries=0;let success=this.requestAd();if(!success){this.log("[rewarded ad] requestRewardedAd failed to request ad");readyCallback({status:false,msg:'ad request failed, internal error'});}
this.log("[rewarded ad] requested ad, waiting for it to be ready");this.readyCallback=readyCallback;},showRewardedAd:function(callback){this.log("[rewarded ad] showRewardedAd called");if(typeof callback!=='function'){console.warn("[rewarded ad] show() called with invalid callback (not a function)");return;}
if(this.adShowing){this.log("[rewarded ad] showRewardedAd called but ad already showing");callback({status:false,reward:false,msg:'ad already showing. only call show() once after request() callback'});return;}
if(!this.storedEvt){this.log("[rewarded ad] showRewardedAd called but no stored event");callback({status:false,reward:false,msg:'rewarded ad not ready. call request() first'});return;}
if(typeof this.storedEvt.makeRewardedVisible!=='function'){this.log("[rewarded ad] showRewardedAd called but storedEvt.makeRewardedVisible is not a function");callback({status:false,reward:false,msg:'failed to show rewarded ad, internal error'});return;}
this.storedEvt.makeRewardedVisible();this.log("[rewarded ad] showing rewarded ad");__ez.pel.Add(this.slot,[new __ezDotData("placeholder_refreshes",this.impressionCount)]);this.log("[rewarded ad] fired placeholder_refreshes",this.impressionCount);this.adShowing=true;this.rewardCallback=callback;},requestAndShowOverlay:function(callback,text,config={alwaysCallback:false,lockScroll:false,rewardOnNoFill:false,canCancel:true,},){if(typeof callback!=='function'){console.warn("[rewarded ad] requestAndShowOverlay() called with invalid callback (not a function)");return;}
if(typeof config.canCancel==='undefined'){config.canCancel=true;}
if(this.overlayShowing){this.log("[rewarded ad] requestAndShowOverlay called but overlay already showing");if(config.alwaysCallback){callback({status:false,reward:false,msg:'overlay already showing'});}
return;}
if(!text.header){text.header="Watch Ad to Continue?";}
if(!text.accept){text.accept="Watch Ad";}
if(!text.cancel){text.cancel="Cancel";}
const overlayHTML=this.buildOverlayHTML(text,config);const removeOverlay=()=>{const overlay=document.getElementById('ez-rewarded-overlay');if(overlay){overlay.parentNode.removeChild(overlay);}
if(this.scrollLocked){window.onscroll=null;this.scrollLocked=false;}
this.overlayShowing=false;};const requestAndPrepareAd=()=>{this.requestRewardedAd((requestResult)=>{if(requestResult.status){if(!document.getElementById('ez-rewarded-overlay')){const overlayContainer=document.createElement('div');overlayContainer.innerHTML=overlayHTML;document.body.appendChild(overlayContainer.firstElementChild);const cancelButton=document.getElementById('ez-rewarded-cancel-button');if(cancelButton){cancelButton.onclick=function(){removeOverlay();if(config.alwaysCallback){callback({status:false,reward:false,msg:'user cancelled'});}}}
if(config.lockScroll&&window.onscroll===null){const scrollY=window.scrollY;const scrollX=window.scrollX;window.onscroll=function(){window.scrollTo(scrollX,scrollY);};this.scrollLocked=true;}
this.overlayShowing=true;}
const acceptButton=document.getElementById('ez-rewarded-accept-button');if(!acceptButton){this.log("[rewarded ad] blockUntilAdWatched: Accept button not found");removeOverlay();if(config.alwaysCallback){callback({status:false,reward:false,msg:'internal error'});}
return;}
acceptButton.disabled=false;acceptButton.textContent=text.accept;acceptButton.onclick=()=>{acceptButton.disabled=true;this.showRewardedAd((closeResult)=>{if(closeResult.status&&closeResult.reward){this.log("[rewarded ad] blockUntilAdWatched: Ad watched, reward granted. Removing overlay");removeOverlay();callback({status:true,reward:true,msg:'ad watched'});return;}else{this.log("[rewarded ad] blockUntilAdWatched: Ad closed before reward granted, requesting new ad");requestAndPrepareAd();return;}});};}else{removeOverlay();this.log("[rewarded ad] blockUntilAdWatched: Failed to load ad");if(config.rewardOnNoFill){callback({status:true,reward:true,msg:'failed to load ad'});}
if(config.alwaysCallback){if(config.rewardOnNoFill){callback({status:true,reward:true,msg:'failed to load ad'});}else{callback({status:false,reward:false,msg:'failed to load ad'});}}
return;}});};requestAndPrepareAd();},buildOverlayHTML:function(text,config){let flexAlign="center";if(window._ezaq&&typeof window._ezaq['form_factor_id']!=='undefined'&&(window._ezaq['form_factor_id']===2||window._ezaq['form_factor_id']===3)){flexAlign="flex-start";}
let overlayHTML=`
            <div id="ez-rewarded-overlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.8); z-index: 999999; display: flex; justify-content: center; align-items: ${flexAlign}; font-family: sans-serif;">
                <div id="ez-rewarded-modal" style="background-color: #fff; margin: 24px; padding: 32px; border-radius: 12px; max-width: 500px; text-align: center;">
                    <span style="display: block; margin: 0 0 24px 0; color: #1a1a1a; font-size: 24px; font-weight: 600; line-height: 1.3;">${text.header}</span>
                    <div style="margin-bottom: 28px;">
        `;for(let i in text.body){overlayHTML+=`
                    <span id="ez-rewarded-message=${i}" style="display: block; margin-bottom: 16px; font-size: 16px; line-height: 1.5; color: #444;">${text.body[i]}</span>
            `;}
overlayHTML+=`
                    </div>
                    <div style="display: flex; justify-content: ${config.canCancel?'space-between':'center'}; margin-top: 12px;">
        `;if(config.canCancel){overlayHTML+=`
                    <button id="ez-rewarded-cancel-button" style="background-color: transparent; color: #666; padding: 12px 12px; margin: 6px; border: 1px solid #ddd; border-radius: 6px; cursor: pointer; font-size: 16px; transition: background-color 0.2s; flex: 0.25;">${text.cancel}</button>
            `;}
overlayHTML+=`
                    <button id="ez-rewarded-accept-button" style="background-color: #4caf50; color: white; padding: 12px 12px; width: auto; margin: 6px; border: none; border-radius: 6px; cursor: pointer; font-size: 16px; font-weight: 500; transition: background-color 0.2s; flex: ${config.canCancel?'0.75':'1'};">${text.accept}</button>
        `;overlayHTML+=`
                    </div>
                </div>
            </div>
        `;return overlayHTML;},blockUntilAdWatched:function(){this.log("[rewarded ad] blockUntilAdWatched called");let header=this.contentBlockerHeader||"Watch Ad to Continue Browsing";let body=this.contentBlockerBody
let accept=this.contentBlockerAcceptText||"Watch Ad";let cooldownTime=this.contentBlockerCooldown+(this.contentBlockerCooldown===1?" hour":" hours");if(this.contentBlockerCooldown<1){cooldownTime=Math.ceil(this.contentBlockerCooldown*60)+(this.contentBlockerCooldown*60===1?" minute":" minutes");}
if(this.contentBlockerCooldownMessage){let cooldownMessage=this.contentBlockerCooldownMessage;cooldownMessage=cooldownMessage.replace("%cooldown",cooldownTime);body.push(cooldownMessage);}
this.requestAndShowOverlay(()=>{this.log("[rewarded ad] blockUntilAdWatched: Ad watched, setting cooldown");this.storeBlockerDisplayedFlag(this.contentBlockerCooldown);this.resetBlockerPageviewCount();},{header:header,body:body,accept:accept,},{alwaysCallback:false,lockScroll:true,canCancel:false,});},contentBlockerCheckAndSet:function(){if(this.getBlockerDisplayedFlag()){this.log("[rewarded ad] blocker already shown and has not expired, not showing again");return false;}
if(this.getUniquePageViewCount()>=this.contentBlockerMinPageviews){this.log("[rewarded ad] unique page view count is >= minimum, showing content blocker");return true;}
let currentURL=window.location.href;if(this.isURLViewed(currentURL)){this.log("[rewarded ad] current URL already viewed, not adding to viewed URLs");return false;}
this.addViewedURL(currentURL);this.incrementBlockerPageviewCount();this.log("[rewarded ad] current URL added to viewed URLs and page view count incremented");return false;},storeBlockerDisplayedFlag:function(hours){this.log("[rewarded ad] setting blocker shown in cookie with ttl of "+hours+" hours");const expiryTime=Math.floor(Date.now()/1000)+(hours*60*60);this.setCookie(this.blockerShownStorageKey,JSON.stringify({value:true,expiry:expiryTime}));},getBlockerDisplayedFlag:function(){this.log("[rewarded ad] checking blocker shown in cookie");const stored=this.getCookie(this.blockerShownStorageKey);if(!stored){this.log("[rewarded ad] blocker shown item not found");return false;}
const data=JSON.parse(stored);if(!data||!data.value){this.log("[rewarded ad] blocker shown item found but value is false");return false;}
const currentTime=Math.floor(Date.now()/1000);if(data.expiry>currentTime){this.log("[rewarded ad] blocker shown item found and valid. Remaining time in hours: "+((data.expiry-currentTime)/(60*60)).toFixed(2));return true;}else{this.log("[rewarded ad] blocker shown item found but expired");this.eraseCookie(this.blockerShownStorageKey);return false;}},addViewedURL:function(url){this.log("[rewarded ad] adding viewed URL to cookie: "+url);let viewedURLs=this.getViewedURLs();viewedURLs.push(url);this.setCookie(this.blockerViewedURLsStorageKey,JSON.stringify(viewedURLs));},getViewedURLs:function(){const stored=this.getCookie(this.blockerViewedURLsStorageKey);let viewedURLs=stored?JSON.parse(stored):[];this.log("[rewarded ad] viewed URLs:",viewedURLs);return viewedURLs;},isURLViewed:function(url){let viewedURLs=this.getViewedURLs();for(let i=0;i<viewedURLs.length;i++){if(viewedURLs[i]===url){this.log("[rewarded ad] url is already viewed:"+url);return true;}}
this.log("[rewarded ad] url is not viewed:"+url);return false;},incrementBlockerPageviewCount:function(){let pageViewCount=this.getUniquePageViewCount();pageViewCount++;this.setCookie(this.blockerPageviewCountStorageKey,pageViewCount);this.log("[rewarded ad] page view count incremented to:",pageViewCount);},resetBlockerPageviewCount:function(){this.log("[rewarded ad] resetting page view count");this.eraseCookie(this.blockerPageviewCountStorageKey);},getUniquePageViewCount:function(){const stored=this.getCookie(this.blockerPageviewCountStorageKey);let pageViewCount=stored?parseInt(stored):0;this.log("[rewarded ad] unique page view count:",pageViewCount);return pageViewCount;},getCookie:function(name){const value=`; ${document.cookie}`;const parts=value.split(`; ${name}=`);if(parts.length===2)return parts.pop().split(';').shift();},setCookie:function(name,value,hours){const domain=this.getDomain();const expires=hours?`; expires=${new Date(Date.now()+(hours*60*60*1000)).toUTCString()}`:'';document.cookie=`${name}=${value}; path=/; domain=${domain}${expires}`;},eraseCookie:function(name){const domain=this.getDomain();document.cookie=`${name}=; path=/; domain=${domain}; expires=Thu, 01 Jan 1970 00:00:00 UTC`;},getDomain:function(){const domainParts=document.location.hostname.split('.');return domainParts.slice(-2).join('.');},example:function(){window.ezRewardedAds=window.ezRewardedAds||{};window.ezRewardedAds.cmd=window.ezRewardedAds.cmd||[];window.ezRewardedAds.cmd.push(function(){window.ezRewardedAds.request(function(requestResult){if(requestResult.status){console.log("Rewarded ad ready");if(confirm("Watch ad for reward?")){window.ezRewardedAds.show(function(closeResult){if(closeResult.status){console.log("Rewarded ad closed");if(closeResult.reward){console.log("Reward granted!");}}else{console.log("Failed to show rewarded ad:"+closeResult.msg);}});}else{console.log("User declined to watch ad");}}else{console.log("Rewarded ad request failed: "+requestResult.msg);}});});},});} catch(err) {var hREED = function(er) {return function() {reportEzError(er, "/porpoiseant/ezadloadrewarded.js")}}; typeof reportEzError==="function"?hREED(err):window.addEventListener('reportEzErrorDefined',hREED(err), {once: true}); console.error(err);}